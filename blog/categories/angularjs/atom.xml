<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AngularJS | revolunet blog]]></title>
  <link href="http://revolunet.github.io/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://revolunet.github.io/"/>
  <updated>2013-05-01T01:43:08+02:00</updated>
  <id>http://revolunet.github.io/</id>
  <author>
    <name><![CDATA[revolunet team]]></name>
    <email><![CDATA[contact@revolunet.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS tips'n'tricks part 1]]></title>
    <link href="http://revolunet.github.io/blog/2013/05/01/angular-tips-n-tricks/"/>
    <updated>2013-05-01T00:00:00+02:00</updated>
    <id>http://revolunet.github.io/blog/2013/05/01/angular-tips-n-tricks</id>
    <content type="html"><![CDATA[<p>In the past few months we learned a lot of new AngularJS stuff. Here is a first bunch of tricks, please comment and help us improve theses exemples if your tricks are even more awesome :)</p>

<p>We compiled most of our <a href="https://gist.github.com/revolunet/4657146">best AngularJS ressources in a gist</a> and we maintain a list of related  twitter accounts here : <a href="https://twitter.com/revolunet/angularjs">https://twitter.com/revolunet/angularjs</a>.</p>

<h3>Scopes</h3>

<p>You definitely need to read this article : <a href="http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs">http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs</a></p>

<h3>Directives</h3>

<p>The official documentation is not crystal clear at first approach but it documents most of what you need to understand: <a href="http://docs.angularjs.org/guide/directive">http://docs.angularjs.org/guide/directive</a>. So read it. And again. And again.</p>

<h3>Watch an object or a list</h3>

<p>If you watch a list or an object with the <code>objectEquality</code> parameter not set, then the <code>$watch</code> callback won't be triggered if the object is only updated partially. Setting it to <code>true</code> will trigger it on any modification; this has performance impact so use carefully.</p>

<p><code>``js
// the last</code>true` means compare by value and not by ref, useful for nested objects :)
$scope.$watch('myConfig', function(newValue, oldValue) {</p>

<pre><code>console.log('myConfig changed !', newValue);
</code></pre>

<p>}, true)
```</p>

<h3>Two way data binding attribute without explicit scope declaration.</h3>

<p>Sometimes you need to access a directive attribute with a two-way data binding without declaring it explicitely in the directive scope configuration. You can do this using the <code>$parse</code> service.</p>

<p>If the scope would be isolated (<code>scope: {}</code>) then you'd have to use <code>scope.$parent</code> instead of $scope.</p>

<p><iframe style="width: 100%; height: 500px" src="http://jsfiddle.net/p2cjt/embedded/js,html,result/light/"></iframe><br><br></p>

<h3>Use a callback function with arguments in your directive</h3>

<p>To call a function defined in one of your attribute, declare it in the scope with <code>&amp;</code>.</p>

<p>If you need to pass arguments, you must execute the callback using an object form for the arguments. AngularJS then call the function with your arguments in the correct order comparing your object and the callback declaration.</p>

<p>The following example also demonstrates how to watch multiples values at once.
<iframe style="width: 100%; height: 500px" src="http://jsfiddle.net/HnrV7/embedded/js,html,result/light/"></iframe><br><br></p>

<h3>Custom transclusion</h3>

<p>This example shows how to define a custom transclusion function and control its scope.</p>

<p><iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/pHZNY/embedded/js,html,result/light/"></iframe><br><br></p>

<h3>Announcer/Notifier pattern</h3>

<p>If you need to listen to DOM objects creation/deletion, you can simply create a 'notifier' directive and an 'announcer' directive that you'll add to the objects you want to monitor. That directive will announce new instances creation (link function called) and destruction (`scope.$destroy called).</p>

<p>It can be useful if you want to monitor arbitrary objects lifecycles, for example a <code>ng-repeat</code>. The 'announcement' can be made via events, or better, using a custom notifier controller. All credits goes to @garanajpr for the ideas.</p>

<p><iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/4ULCS/embedded/js,html,result/light/"></iframe><br><br></p>

<p>Many more tricks to come, stay tuned :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AngularJS views animations for mobile applications]]></title>
    <link href="http://revolunet.github.io/blog/2013/04/30/angularjs-animations-mobile-applications/"/>
    <updated>2013-04-30T20:20:00+02:00</updated>
    <id>http://revolunet.github.io/blog/2013/04/30/angularjs-animations-mobile-applications</id>
    <content type="html"><![CDATA[<p>AngularJS team recently added the very expected animation feature to their framework. You can have a great overview with the <a href="http://www.youtube.com/watch?v=cF_JsA9KsDM">Mi≈°ko Hevery introduction video</a> and a complete overview article at the great <a href="http://www.yearofmoo.com/2013/04/animation-in-angularjs.html">Year of Moo blog</a>.</p>

<p>From now (AngularJS 1.1.4), you can easily animate any directive, just by adding an <code>ng-animate</code> attribute and defining the animation CSS class.</p>

<p>As a mobile web developer, the first thing that come to mind is animating your mobile applications views. Its quite easy to add slide-in effects with the current routing system :</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/8pny4/embedded/result,js,html,css/light/"></iframe><br><br></p>

<p>As you can see this is a very simple code and the animation is always the same. But typically, if you open a screen in your mobile application, it may appear sliding from the right, and you may then have a 'Back' button, and in that case, when clicked, the animation <strong>must</strong> be reversed, or you expose your users to an unexpected behaviour, and an akward #WTF moment.</p>

<p>With the actual AngularJS implementation, the problem is that the <code>ng-view</code> directive, which is heavily used for the AngularJS routing, doesn't handle dynamic <code>ng-animate</code> directive at all, despite what says the doc. You can only set the enter and leave animation once, because these <a href="https://github.com/angular/angular.js/blob/400f9360bb2f7553c5bd3b1f256a5f3db175b7bc/src/ng/directive/ngView.js#L173">are set at linking time</a> in case of the ng-view. And thus, you can only have one enter animation and one leave animation for your application view and for the whole applicaiton lifecycle.</p>

<p>There are a <a href="https://github.com/angular/angular.js/issues/2480">few</a> <a href="https://github.com/angular/angular.js/issues/2464">issues</a> opened and we can hope the team must be working on it and that should be resolved some day.</p>

<p>But an easy workaround to achieve this is to act on the enter and leave CSS classes themselves directly. Instead of changing the CSS classes names at the DOM level, one could update the CSS classes definitions to achieve the same result without even touching the DOM. The ng-view directive still has the same enter and leave CSS classes names and instead we change theses classes definition, and thus the animation direction.</p>

<p>There are several ways to do this. We could dynamically add a stylesheet to the document, or change the stylesheet source using <code>ng-src</code> attribute but this wouldn't be very efficient due to multiple downloads of the ressource.</p>

<p>But, as we are AngularJS powered, we could simply bind a style tag to a javascript variable so it can be updated dynamically like any other DOM element.</p>

<p>Here's how we've done bi-directionnal animations for the ng-view. Note the usage of the <code>ng-bind-html-unsafe</code> that take cares of not escaping the CSS output and the use of <code>transform</code> CSS property to force the use of GPU and improve transition smoothness, especially on mobile devices.</p>

<p><iframe style="width: 100%; height: 350px" src="http://jsfiddle.net/UvP54/embedded/result,js,html,css/light/"></iframe><br><br></p>
]]></content>
  </entry>
  
</feed>
