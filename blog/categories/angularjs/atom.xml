<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AngularJS | revolunet blog]]></title>
  <link href="http://blog.revolunet.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://blog.revolunet.com/"/>
  <updated>2013-07-26T12:40:28+02:00</updated>
  <id>http://blog.revolunet.com/</id>
  <author>
    <name><![CDATA[revolunet team]]></name>
    <email><![CDATA[contact@revolunet.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS tips'n'tricks part 2]]></title>
    <link href="http://blog.revolunet.com/blog/2013/07/23/angularjs-tips-n-tricks-2/"/>
    <updated>2013-07-23T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/07/23/angularjs-tips-n-tricks-2</id>
    <content type="html"><![CDATA[<p>Here's a new batch of AngularJS tips and gotchas; If you didn't read it yet, you can check the <a href="http://blog.revolunet.com/blog/2013/05/01/angular-tips-n-tricks/">part 1</a> and feel free to comment below :)</p>

<h3>Access an element scope from outside</h3>

<p>This is useful for debugging: in your Chrome console, highlight a node in the Elements tab, then, in the console, to check its scope :</p>

<p><code>js
angular.element($0).scope();
</code>
or even :
<code>js
angular.element(document.getElementById('elementId')).scope();
</code></p>

<p>The <a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?utm_source=chrome-ntp-icon">Batarang Chrome Extension</a> is much powerful and let you inspect any scope, anywhere :)</p>

<h3>Unwatch an expression</h3>

<p>Sometimes you want to watch an expression only a few times, and then forget it. The <code>$watch</code> function returns a callback just for that. You just have to execute it back to destruct the watcher.</p>

<p>```js
var watcher = $scope.$watch('data.counter', function(newValue, oldValue) {</p>

<pre><code>iElement.css('width', 50 * newValue + 'px');
if (newValue &gt;= 10) {
    // autodestruction when data.counter reaches 10
    watcher();
}
</code></pre>

<p>});
```</p>

<h3>Group elements in a select</h3>

<p>If you play with selects, the <code>ng-options</code> directive is <a href="http://docs.angularjs.org/api/ng.directive:select">quite powerful</a> and <a href="http://odetocode.com/blogs/scott/archive/2013/06/19/using-ngoptions-in-angularjs.aspx">has many syntaxes</a>.</p>

<p>For example you can easily group a model by attribute to have a nested select menu :</p>

<p><code>html
&lt;select ng-options="distrib.version group by distrib.name for distrib in distribs"&gt;&lt;/select&gt;
</code></p>

<p>Of course, just add an <code>ng-model</code> directive to your select to data-bind it to one of the values.</p>

<h3>Filter falsy values</h3>

<p>You can't use the builtin filter for falsy attributes or values :/ I don't know if this is a bug of feature, but a simple workaround is to use a custom filter function that you can expose on the scope. (you can also define your own filter).</p>

<p><code>js
$scope.testValues = ['a', 'b', 'c', false, true, 0, -1, 5, 42];
$scope.isFalsy = function(val) {
  return !val;
}
</code>

<code>html
{{ testValues|filter:true }}        //  [true]
{{ testValues|filter:5 }}           //  [5]
{{ testValues|filter:0 }}           //  ['a', 'b', 'c', false, true, 0, -1, 5, 42]
{{ testValues|filter:false }}       //  ['a', 'b', 'c', false, true, 0, -1, 5, 42]
{{ testValues|filter:isFalsy }}     //  [false, 0]
</code>
</p>

<h3>Filter on objects</h3>

<p>The builtin filter function is <a href="http://code.angularjs.org/1.1.5/docs/api/ng.filter:filter">quite powerful</a> and allows you to filter a list of objects on given properties only, or on everything, exactly or not, negated or not, etc...</p>

<p>
<code>html
{{ games|filter:'street' }}                       //  all games containing "street" in any property
{{ games|filter:'!street' }}                      //  all games NOT containing "street" in any property
{{ games|filter:{name:'street'} }}                //  all games containing "street" in their name
{{ games|filter:{name:'street'}:true }}           //  all games named exactly "street"
{{ games|filter:{name:'street', device:'PS3'} }}  //  all games containing "street" in their name and PS3 in their device
</code>
</p>

<h3>ng-repeat with duplicate items</h3>

<p>If for some reason you need to have duplicate items in your <code>ng-repeat</code> you can extend your <code>ng-repeat</code> expression with <code>track by $index</code> and it works :)</p>

<h3>Directive : parse attribute without watching it</h3>

<p>In one of your directive, if you need to have a read-only access to an attribute model, but without the automatic watch/binding, you can simply use <code>&amp;</code> instead of <code>=</code> when declaring the binding in the scope. You'll then be able to access the model value . (this may break in future releases). This is a shortcut for using the <code>$parse</code> service on the current scope.</p>

<p>```js
app.directive('rnCounter', function() {
  return {</p>

<pre><code>scope: {
  count: '&amp;rnCounter'
},
link:function(scope, iElement) {
  iElement.bind('click', function() {
    console.dir(scope.count());
  })
}
</code></pre>

<p>  }
})
```</p>

<h3>Data-binding to a boolean</h3>

<p>You can bind to a boolean value, but you <strong>can't</strong> update that value from your directive.</p>

<p>This won't work :
```html</p>

<div rn-zippy status="true"></div>


<p>```</p>

<p>```js
app.directive('rnZippy', function() {
  return {</p>

<pre><code>restrict: 'A',
scope: {
  status: '=?'
},
link: function(scope, iElement) {
  function toggle () {
    scope.$apply(function() {
      scope.status = !scope.status;  
    });
  }
  iElement.bind('click', toggle);
}
</code></pre>

<p>  }
})
```</p>

<p>You need to use a real model, OR, initialise a new one and use it as your model instead :
```html</p>

<div rn-zippy ng-init="status=true" status="status"></div>


<p>```</p>

<h3>Includes onload</h3>

<p>You can trigger a callback when your <code>ng-include</code> partial is loaded :
```html</p>

<div ng-inlude="'partials/' + page + '.html'" onload="callback()"></div>


<p>```</p>

<p>For the <code>ngView</code>, you need to listen to the <code>$viewContentLoaded</code> event.</p>

<h3>Express testing</h3>

<p>You know you should write serious tests suites ? There's everything to help you in AngularJS with Karma test runner + Jasmine.</p>

<p>Once you have many tests, they can take some time to execute and there's a little trick to speed you up : you can limit the test-runner to a given test group by using <code>ddescribe</code> instead of <code>describe</code> and to a single test with <code>iit</code> instead of <code>it</code>.</p>

<p>That's awesome to focus on specific tests for a while.</p>

<h3>Service decorators</h3>

<p>You can easily decorate and modify any existing service or directive. That's how the <code>ngMobile</code> overrides the <code>ngClick</code> directive to handle transparently the FastClick behaviour.</p>

<p>Here's an exemple that overrides the <code>$sniffer</code> service and fix the animation detection for older androids devices (landed in <a href="https://github.com/angular/angular.js/commit/ef5bc6c">ef5bc6c</a>) :</p>

<p>```js
app.config(['$provide', function ($provide) {
  $provide.decorator('$sniffer', ['$delegate', function ($delegate) {</p>

<pre><code>if (!$delegate.transitions||!$delegate.animations) {
  $delegate.transitions = (typeof document.body.style.webkitTransition=== 'string'); 
  $delegate.animations = (typeof document.body.style.webkitAnimation === 'string'); 
}
return $delegate;
</code></pre>

<p>  }]);
}]);
```</p>

<p>That's all for today, feel free to ask and comment below :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn AngularJS in 5 steps]]></title>
    <link href="http://blog.revolunet.com/blog/2013/06/01/starting-with-angularjs/"/>
    <updated>2013-06-01T02:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/06/01/starting-with-angularjs</id>
    <content type="html"><![CDATA[<p>I've seen some developers quite shy about AngularJS when confronted to all the magical powers; don't be afraid, AngularJS indeed introduces several new concepts but you can get them in just a few weeks of practice... The Google team is working hard to lower the Angular entry barrier and to make everything as simple as possible for developers.</p>

<p><strong>AngularJS is a new disruptive innovation in the Javascript frameworks world and it prefigures the future of web browsers : templates, data-binding, web components...</strong></p>

<p>In this post i'll give some advices for the AngularJS newbies and share with you the best pointers to learn and understand the core concepts quickly.</p>

<p>First, to understand AngularJS you of course need to know a bit of Javascript. If you're not comfortable enough yet, pick a free book on <a href="http://jsbooks.revolunet.com">JSbooks</a> and <a href="http://www.codecademy.com/tracks/javascript">practice</a>.</p>

<p>If you have a jQuery background, you absolutely need to read this in-depth Stack Overflow answer : <a href="http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background/15012542#15012542">How to think in AngularJS if i have a jQuery background</a>. Just imagine the productivity boost you'll get when you won't need to maintain the DOM anymore :)</p>

<h3>To sum up key features of AngularJS :</h3>

<ul>
<li><strong>Templates</strong> : Your templates lives right in the DOM. Forget mustache, handlebars, hogan...</li>
<li><strong>Two-way data-binding</strong> : Your javascript data automagically updates your DOM and vice-versa.</li>
<li><strong>Routing</strong> : Define routes, associate templates and controller in just a few lines.</li>
<li><strong>Forms</strong> : Many helpers to help dealing with forms, one of the worst webdevs nightmare.</li>
<li><strong>Directives</strong> : Encapsulates templates and code in reusable components easily.</li>
<li><strong>Testability</strong> : AngularJS was designed in a way your web app can be fully testable.</li>
<li><strong>Animation</strong> : Easily animate elements and views.</li>
</ul>


<h3>Here are 5 steps to boost your AngularJS skills right now :</h3>

<ol>
<li>follow the <a href="http://docs.angularjs.org/tutorial">official tutorial</a> and the <a href="http://docs.angularjs.org/guide">dev guide</a>.</li>
<li>watch the awesome <a href="http://egghead.io">egghead.io video series</a>. they're 3mins each only :)</li>
<li>watch the <a href="http://www.youtube.com/watch?v=i9MHigUZKEM">60mins AngularJS fundamentals video</a></li>
<li>read the code of <a href="http://todomvc.com/architecture-examples/angularjs">some</a> <a href="https://github.com/petebacondarwin/foodme">great</a> <a href="https://github.com/angular-app/angular-app">AngularJS</a> <a href="https://github.com/vojtajina/task-manager">app</a> <a href="https://github.com/IgorMinar/Memory-Game">examples</a>.</li>
<li>read as many times as needed the <a href="http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs">nuances of scope prototypal inheritance</a></li>
</ol>


<p>Of course, dont just watch/read, you need to experiment every step :)</p>

<p>After that, you should have a pretty good understanding of the framework and be able to <strong>angularize all the things</strong> :)</p>

<p><strong>Need help ?</strong> Ask your questions in the comments below, or on IRC #angularjs channel, or on <a href="https://groups.google.com/forum/?fromgroups#!forum/angular">the dedicated google group</a>.</p>

<p>BTW, if you read French, great ressources here : <a href="http://www.frangular.com">frangular.com</a> and <a href="http://lauterry.github.io/slides-prez-angular">Thierry Lau's introduction slides</a>.</p>

<p>Need more ressources ?</p>

<ul>
<li>Read the Angular source itself : <a href="https://github.com/angular/angular.js">github.com/angular/angular.js</a></li>
<li><a href="https://github.com/jmcunningham/AngularJS-Learning">A huge list of good AngularJS ressources</a> maintained by the community</li>
<li><a href="https://gist.github.com/revolunet/4657146">My AngularJS ressources compilation</a></li>
<li><a href="https://github.com/angular/angular.js/wiki/JSFiddle-Examples">Lots of JSfiddle examples in the AngularJS wiki</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/angularjs">Stack overflow answers</a></li>
<li><a href="https://speakerdeck.com/search?q=angularjs">Speackerdeck prezos</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making of the angular-carousel]]></title>
    <link href="http://blog.revolunet.com/blog/2013/05/02/angular-carousel-making-of/"/>
    <updated>2013-05-02T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/05/02/angular-carousel-making-of</id>
    <content type="html"><![CDATA[<p>Our first real life experiment with AngularJS is a mobile and touch-friendly carousel directive.</p>

<p>As this project shed some lights on various AngularJS aspects, we'd like to share it with you;
The full demo+code is available here : <a href="http://blog.revolunet.com/angular-carousel">http://blog.revolunet.com/angular-carousel</a></p>

<p>The goal is to transform any <code>ng-repeat</code> directive into a carousel, just by adding the <code>rn-carousel</code> attribute to its <code>ul</code> container. The directive take care of the dirty work for you, without any jQuery.</p>

<p>Here's a very basic example of a Youtube API call, with the data displayed in a regular Angular template; We just add a <code>rn-carousel</code> attribute to the <code>ul</code> element to ask a carousel :)</p>

<p><iframe style="width: 100%; height: 330px" src="http://jsfiddle.net/3QBEE/embedded/result,html,js,css/light/"></iframe><br><br></p>

<p>This <code>rn-carousel</code> directive is responsible of :</p>

<p><strong>1) wrapping the real ul/li in a carousel container and add CSS classes</strong></p>

<p>We first wrap the original <code>ul</code> block in an outer div using JQlite <code>wraps</code> method during the directive link phase. This cannot be doneduring the compile phase as it would lead to an infinite recursion loop. (AngularJS will wrap again an again as the original directive stays untouched).</p>

<p>Then we add some CSS classes and an unique carousel identifier class so we can target that instance easily later.</p>

<p>The CSS makes the ul/li block appears as a single horizontal line composed of many li blocks, so its very easy to slide the blocks horizontally.</p>

<p><strong>2) watching the ng-repeat expression</strong></p>

<p>Because we want to monitor precisely the items in our carousel, and we want to be able to dynamically add/remove items, we need to extract and watch the original <code>ng-repeat</code> expression. We can then watch that expression and then be notified when its updated. This is useful to know how many slides we have and update our indicators accordingly for example.</p>

<p><del>This extraction is done by literally parsing the ng-repeat expression in a generic way, using the generated normalized comment node. <a href="http://www.bennadel.com/blog/2457-Accessing-scope-On-The-DOM-Using-AngularJS.htm">Credits goes to @bennadel</a> for this awesome trick</del>.</p>

<p><strong>Update :</strong> I ended up with just extracting the li <code>ng-repeat</code> attribute during the <code>compile</code> phase which is much less overhead.</p>

<p><strong>3) binding touch and click events</strong></p>

<p>Like most directives, we bind events in the linking phase. We just take care of binding both touch and mouse events.</p>

<p><code>js
// bind events
container.bind('mousedown touchstart', swipeStart);
container.bind('mousemove touchmove', swipe);
container.bind('mouseup touchend', swipeEnd);
</code></p>

<p><strong>4) animating the slides smoothly</strong></p>

<p>When we detect a <code>touchstart</code> we just store the initial event position. On <code>touchemove</code> we update the horizontal offset and move the whole <code>ul</code> accordingly using CSS. Then on <code>touchend</code>, we detect the desired position (prev or next) and dynamically add CSS styles and classes to move the slides accordingly, or restore the current position in some cases.</p>

<p>The slide movement is made thanks to the CSS <code>transition</code> and <code>translate3d</code> properties to force CSS 3D transforms and thus animate the slides using the GPU which make the movement much more smooth especially on mobile devices.</p>

<p>```js
// the offset value is simply : desiredSlideIndex * slideWidth
carousel.css({</p>

<pre><code>'-webkit-transform': 'translate3d(' + offset + 'px,0,0)',
'-moz-transform': 'translate3d(' + offset + 'px,0,0)',
'-ms-transform': 'translate3d(' + offset + 'px,0,0)',
'-o-transform': 'translate3d(' + offset + 'px,0,0)',
'transform': 'translate3d(' + offset + 'px,0,0)'
</code></pre>

<p>});
```</p>

<p><strong>5) adding an indicator to our carousel</strong></p>

<p>As we already watch the <code>ng-repeat</code> expression, we track the number of slides in the carousel and so its quite easy to add data-bound indicators to our carousel. You can enable these by adding a <code>rn-carousel-indicator="true"</code> attribute on your <code>ul</code>.</p>

<p>The indicators are produced by the <code>rn-carousel-indicators</code> directive, completely decoupled, during the linking phase. For the directive to be executed, we compile it through the <code>$compile</code> service before appending it to our container.</p>

<p>It just takes <code>items</code> and <code>index</code> attributes that will be injected in an isolated scope to produce the indicators and set the CSS classes.</p>

<p>```js
// enable carousel indicator
var showIndicator = (iAttrs['rnCarouselIndicator']==='true');
if (showIndicator) {</p>

<pre><code>// as the HTML contains a directive, we need to $compile it
// before appending it to our container
var indicator = $compile("&lt;div id='" + carouselId +"-indicator' " + 
    " index='carouselIndex' items='carouselItems' rn-carousel-indicators " +
    " class='rn-carousel-indicator'&gt;&lt;/div&gt;"
)(scope);
container.append(indicator);
</code></pre>

<p>}
```
<strong>6) offer a two-way data binding for the active slide index</strong></p>

<p>The carousel current index position can be data-bound to an optional <code>rn-carousel-index</code> attribute if provided. This allows you to display the carousel position somewhere else, add custom controls/indicators, initialise to a different slide...</p>

<p>```js</p>

<p>// set initial position at first slide
scope.carouselIndex = 0;</p>

<p>if (iAttrs.rnCarouselIndex) {</p>

<pre><code>//  if a binding attribute is present, use it.
var activeModel = $parse(iAttrs['rnCarouselIndex']);
scope.$watch('carouselIndex', function(newValue) {
    // when the carousel internal index changes, update the model
    activeModel.assign(scope.$parent, newValue);
});
scope.$parent.$watch($parse(iAttrs.rnCarouselIndex), function(newValue) {
    // when the model change, update the local position
    // this is also useful for the initial position
    scope.carouselIndex = newValue;
    updateSlidePosition();
});
</code></pre>

<p>} else {</p>

<pre><code>// if no index attribute, just watch internal index and update display
scope.$watch('carouselIndex', function(newValue) {
    updateSlidePosition();
});
</code></pre>

<p>}
```</p>

<p>The <code>updateSlidePosition()</code> function simply moves the <code>ul</code> block based on the <code>carouselIndex</code> value and the width of the slides. We do this with CSS transition and <code>translate3d</code> so this is animated and hardware accelerated.</p>

<p><strong>7) tests and grunt automation</strong></p>

<p>These subjects will have a dedicated article soon :)</p>

<p><strong>Limitations</strong></p>

<ul>
<li>Only works with ul/li structure</li>
<li>Carousel dimensions is based on the first li detected</li>
</ul>


<p><strong>UPDATE</strong> : the carousel can now be buffered to improve performance with large datasets !</p>

<p><strong>Easy isn't it ?</strong></p>

<p>If you have questions, suggestions, issues, pulls requests... just comment below or on Github :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS tips'n'tricks part 1]]></title>
    <link href="http://blog.revolunet.com/blog/2013/05/01/angular-tips-n-tricks/"/>
    <updated>2013-05-01T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/05/01/angular-tips-n-tricks</id>
    <content type="html"><![CDATA[<p>In the past few months we learned a lot of new AngularJS stuff. Here is a first bunch of tricks, please comment and help us improve theses exemples if your tricks are even more awesome :)</p>

<p>We compiled most of our <a href="https://gist.github.com/revolunet/4657146">best AngularJS ressources in a gist</a> and we maintain a list of related  twitter accounts here : <a href="https://twitter.com/revolunet/angularjs">https://twitter.com/revolunet/angularjs</a>.</p>

<h3>Scopes</h3>

<p>You definitely need to read this article : <a href="http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs">http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs</a></p>

<h3>Directives</h3>

<p>The official documentation is not crystal clear at first approach but it documents most of what you need to understand: <a href="http://docs.angularjs.org/guide/directive">http://docs.angularjs.org/guide/directive</a>. So read it. And again. And again.</p>

<h3>Watch an object or a list</h3>

<p>If you watch a list or an object with the <code>objectEquality</code> parameter not set, then the <code>$watch</code> callback won't be triggered if the object is only updated partially. Setting it to <code>true</code> will trigger it on any modification; this has performance impact so use carefully.</p>

<p><code>``js
// the last</code>true` means compare by value and not by ref, useful for nested objects :)
$scope.$watch('myConfig', function(newValue, oldValue) {</p>

<pre><code>console.log('myConfig changed !', newValue);
</code></pre>

<p>}, true)
```</p>

<h3>Two way data binding attribute without explicit scope declaration.</h3>

<p>Sometimes you need to access a directive attribute with a two-way data binding without declaring it explicitely in the directive scope configuration. You can do this using the <code>$parse</code> service.</p>

<p>If your directive scope is isolated (<code>scope: {}</code>) you have to use <code>scope.$parent</code> instead of <code>scope</code>.</p>

<p><iframe style="width: 100%; height: 500px" src="http://jsfiddle.net/p2cjt/embedded/js,html,result/light/"></iframe><br><br></p>

<h3>Use a callback function with arguments in your directive</h3>

<p>To call a function defined in one of your attribute, declare it in the scope with <code>&amp;</code>.</p>

<p>If you need to pass arguments, you must execute the callback using an object form for the arguments. AngularJS then call the function with your arguments in the correct order comparing your object and the callback declaration.</p>

<p>The following example also demonstrates how to watch multiples values at once.
<iframe style="width: 100%; height: 500px" src="http://jsfiddle.net/HnrV7/embedded/js,html,result/light/"></iframe><br><br></p>

<h3>Custom transclusion</h3>

<p>This example shows how to define a custom transclusion function and modify its scope.</p>

<p><iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/pHZNY/embedded/js,html,result/light/"></iframe><br><br></p>

<h3>Announcer/Notifier pattern</h3>

<p>If you need to listen to DOM objects creation/deletion, you can simply create a 'notifier' directive and an 'announcer' directive that you'll add to the objects you want to monitor. That directive will announce new instances creation (<code>link</code> called) and destruction (<code>scope.$destroy</code> called).</p>

<p>It can be useful if you want to monitor arbitrary objects lifecycles, for example a <code>ng-repeat</code>. The 'announcement' can be made via events, or better, using a custom notifier controller. All credits goes to @garanajpr for the ideas.</p>

<p><iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/4ULCS/embedded/js,html,result/light/"></iframe><br><br></p>

<p>Many more tricks to come, stay tuned :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AngularJS views animations for mobile applications]]></title>
    <link href="http://blog.revolunet.com/blog/2013/04/30/angularjs-animations-mobile-applications/"/>
    <updated>2013-04-30T20:20:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/04/30/angularjs-animations-mobile-applications</id>
    <content type="html"><![CDATA[<p>AngularJS team recently added the very expected animation feature to their framework. You can have a great overview with the <a href="http://www.youtube.com/watch?v=cF_JsA9KsDM">Miško Hevery introduction video</a> and a complete overview article at the great <a href="http://www.yearofmoo.com/2013/04/animation-in-angularjs.html">Year of Moo blog</a>.</p>

<p>From now (AngularJS 1.1.4), you can easily animate any directive, just by adding an <code>ng-animate</code> attribute and defining the animation CSS class.</p>

<p><strong>UPDATE</strong> : AngularJS team <a href="https://github.com/angular/angular.js/commit/fd21c7502f0a25364a810c26ebeecb678e5783c5">fixed the following</a> problem in the last 1.1.5 release. The ng-animate will now be evaulated on each animation, Yahoo :)</p>

<p>As a mobile web developer, the first thing that come to mind is animating your mobile applications views. Its quite easy to add slide-in effects with the current routing system :</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/8pny4/embedded/result,js,html,css/light/"></iframe><br><br></p>

<p>As you can see, the code is very simple code and the animation is always the same (appear from right). But typically, if you open a screen in your mobile application, and there is a 'Back' button, the user expects the slide animation to be reversed when he touches it. If you don't do this, you expose your users to an unexpected behaviour, and an akward #WTF moment.</p>

<p>With the actual AngularJS implementation, there is a problem with the <code>ng-view</code> directive, which is heavily used for the AngularJS routing : it doesn't handle dynamic <code>ng-animate</code> directive at all, despite what says the doc. You can only set the enter and leave animation once, because these <a href="https://github.com/angular/angular.js/blob/400f9360bb2f7553c5bd3b1f256a5f3db175b7bc/src/ng/directive/ngView.js#L173">are set at linking time</a> in case of the ng-view. And thus, you can only have one pre-defined enter and leave animation for your application view and for the whole application lifecycle.</p>

<p>There are a <a href="https://github.com/angular/angular.js/issues/2480">few</a> <a href="https://github.com/angular/angular.js/issues/2464">issues</a> opened and we can hope the team must be working on it and that should be resolved some day.</p>

<p>But an easy workaround to achieve this is to act on the enter and leave CSS classes themselves directly. Instead of changing the CSS classes names at the DOM level, one could update the CSS classes definitions to achieve the same result without even touching the DOM. The ng-view directive still has the same enter and leave CSS classes names and instead we change theses classes definition, and thus the animation direction.</p>

<p>There are several ways to do this. We could dynamically add a stylesheet to the document, or change the stylesheet source using <code>ng-src</code> attribute but this wouldn't be very efficient due to multiple downloads of the ressource.</p>

<p>But, as we are AngularJS powered, we could simply <strong>bind a style tag to a javascript variable</strong> so it can be updated dynamically like any other DOM element.</p>

<p>Here's how we've done bi-directionnal animations for the ng-view. Note the usage of the <code>ng-bind-html-unsafe</code> that take cares of not escaping the CSS output and the use of <code>transition</code> and <code>transform</code> CSS properties to force the use of GPU and improve the animation smoothness, especially on mobile devices.</p>

<p><iframe style="width: 100%; height: 350px" src="http://jsfiddle.net/UvP54/embedded/result,js,html,css/light/"></iframe><br><br></p>

<p>Another clever solution, as pointed out by Andrej in the comments below, is to simply wrap the <code>ng-view</code> in another div that have a dynamic class name, which could change when we need to change the animation direction, like <code>LR</code> then <code>RL</code>. This way we just need to update that classname and the CSS will pick the good one.</p>

<p><code>css
.LR .enter-setup {...}
.LR .leave-setup {...}
.RL .enter-setup {...}
.RL .leave-setup {...}
</code></p>
]]></content>
  </entry>
  
</feed>
