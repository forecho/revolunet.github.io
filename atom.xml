<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[revolunet blog]]></title>
  <link href="http://blog.revolunet.com/atom.xml" rel="self"/>
  <link href="http://blog.revolunet.com/"/>
  <updated>2013-09-30T17:46:08+02:00</updated>
  <id>http://blog.revolunet.com/</id>
  <author>
    <name><![CDATA[revolunet team]]></name>
    <email><![CDATA[contact@revolunet.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extending the Topcoat CSS framework]]></title>
    <link href="http://blog.revolunet.com/blog/2013/09/30/extending-topcoat-css-framework/"/>
    <updated>2013-09-30T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/09/30/extending-topcoat-css-framework</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p><a href="http://topcoat.io">Topcoat.io</a> is the new kid on the block of the CSS-only frameworks. It&#8217;s the first one that&#8217;s built for performance from the ground up, thanks to the constant performance tracking using Chrome telemetry, which makes it a tool of choice to build your mobile applications UI.It is also easy to theme and customize thanks to a smart CSS organisation and a powerful toolchain.</p>

<p>Topcoat has been built for the future, thanks toÂ solid conventions and a cutting-edge javascript architecture, and more goodness :</p>

<ul>
<li><a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/">BEM syntax</a> convention</li>
<li><a href="http://learnboost.github.io/stylus/">stylus</a> CSS preprocessor</li>
<li><a href="http://gruntjs.com">grunt</a> task automation</li>
<li><a href="https://github.com/topcoat/topdoc">TopDoc</a> CSS documentation generator</li>
<li><a href="http://npmjs.org">npm</a> for dependencies</li>
</ul>


<p>It&#8217;s fully open source, not &#8220;fauxpen source&#8221;, and the contributors uses various online tools to run the project :</p>

<ul>
<li><a href="http://github.com/topcoat">Github</a> of course for code and issues</li>
<li><a href="http://codepen.io/Topcoat">codepen.io</a> to prototype and host widgets demos</li>
<li><a href="http://huboard.com/topcoat/topcoat">huboard</a> to manage milestones on top of Github issues</li>
</ul>


<p>All of this make it a powerful framework made to be extensible and performant.</p>

<h2>Install Topcoat</h2>

<p>Just <a href="https://github.com/topcoat/topcoat/releases">download the latest release</a> from github and extract it. The release contains the final CSS with dark and light themes for desktop and mobile, so you can use then directly; just add a link to the <code>topcoat-mobile-light.min.css</code> file in your app for example.</p>

<p>If you want to customize the themes or add new components, you need to run <code>npm install</code> from the topcoat folder. This will download all the widgets sources and local dependencies to your <code>node_modules</code> folder.</p>

<p>Some important things to notice :</p>

<ul>
<li>Each component (button, list, checkbox&#8230;) has its own folder in the <code>node_modules</code> subfolder (so each one has its own npm repo). Each one also has its own gruntfile in case you want to build its css separately.</li>
<li>Most of components have a <code>topcoat-[COMPONENT]-base</code> folder with just enough CSS to completely reset the styling of the element, so other components can override it entirely. For example the default button hasn&#8217;t any default border or background and looks like a simple text block;</li>
<li>The <code>topcoat-theme</code> folder defines the 4 builtin Topcoat themes which are just a combination of variables that defines some variations of the components.</li>
<li>The main Gruntfile list the available themes and associated widgets using pattern globbing and this is from where the final CSS are built, including the given widgets.</li>
</ul>


<h2>Adding a custom theme</h2>

<p>You can easily tweak the builtin themes by modifying the variables inside the <code>topcoat-theme</code> folder then run <code>grunt</code> to rebuild the final CSS. But its much better to add your own theme and leave the others untouched.</p>

<p>Let&#8217;s add a simple green theme :</p>

<ul>
<li>copy the <code>topcoat-theme/src/theme-topcoat-*</code> file from the theme that matches the most your design, eg copy <code>theme-topcoat-mobile-light.styl</code> to <code>theme-green.styl</code>.</li>
<li>create a <code>variables-green.styl</code> with a bunch of variables that override the default ones (see the list of variables in the other variables-* files). For example :</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// base colors</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">color</span> <span class="o">=</span> <span class="err">#</span><span class="mi">00</span><span class="nx">b400</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span> <span class="o">=</span> <span class="err">#</span><span class="nx">e2ffe2</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">placeholder</span><span class="o">-</span><span class="nx">color</span><span class="o">--</span><span class="nx">input</span> <span class="o">=</span> <span class="err">#</span><span class="mi">4</span><span class="nx">eff4e</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">--</span><span class="nx">down</span> <span class="o">=</span> <span class="err">#</span><span class="mi">00</span><span class="nx">b400</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">--</span><span class="nx">hover</span> <span class="o">=</span> <span class="err">#</span><span class="mi">02</span><span class="nx">ff01</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">border</span><span class="o">--</span><span class="nx">focus</span> <span class="o">=</span> <span class="mi">1</span><span class="nx">px</span> <span class="nx">solid</span> <span class="err">#</span><span class="mi">00</span><span class="nx">b400</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">box</span><span class="o">-</span><span class="nx">shadow</span><span class="o">--</span><span class="nx">focus</span> <span class="o">=</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">2</span><span class="nx">px</span> <span class="err">#</span><span class="mi">00</span><span class="nx">b400</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// cta button colors</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">--</span><span class="nx">cta</span> <span class="o">=</span> <span class="err">#</span><span class="mi">00</span><span class="nx">b300</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">border</span><span class="o">--</span><span class="nx">cta</span> <span class="o">=</span> <span class="mi">1</span><span class="nx">px</span> <span class="nx">solid</span> <span class="err">#</span><span class="mi">006700</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">--</span><span class="nx">cta</span><span class="o">--</span><span class="nx">down</span> <span class="o">=</span> <span class="err">#</span><span class="mi">00</span><span class="nx">b400</span>
</span><span class='line'><span class="kd">var</span><span class="o">-</span><span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">--</span><span class="nx">cta</span><span class="o">--</span><span class="nx">hover</span> <span class="o">=</span> <span class="err">#</span><span class="mi">02</span><span class="nx">ff01</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>add <code>@import variables-green</code> to your <code>theme-green.styl</code>. (This allows you later to combine some variables files)</li>
<li>add the theme link in the main gruntfile, &#8216;stylus&#8217; section:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">stylus</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">green</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="kr">import</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;theme-green&#39;</span><span class="p">,</span> <span class="s1">&#39;utils&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">files</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>            <span class="nx">src</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="c1">// here you can eventually add/remove some components from the output</span>
</span><span class='line'>                <span class="s1">&#39;node_modules/topcoat-*/src/**/*.styl&#39;</span>
</span><span class='line'>                <span class="p">],</span>
</span><span class='line'>            <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;css/topcoat-green.css&#39;</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now run <code>grunt</code> and you&#8217;ll see your final <code>topcoat-green.css</code> and  <code>topcoat-green.min.css</code> appear magically in the CSS folder :)</li>
<li>You also have a <code>demo/topcoat-green.html</code> file for free that show you the final result, generated via TopDoc.</li>
</ul>


<h2>Add a custom component</h2>

<p>Now, let&#8217;s say you want to add a custom button to the generated theme, for example <code>button-round</code>.</p>

<p>Add a <code>node_modules/topcoat-button-round</code> folder and create <code>src/topcoat-button-round.styl</code> file. Inside, add your round button definition, with the documentation to generate the demo :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">import</span> <span class="nt">anything</span> <span class="nt">you</span> <span class="nt">need</span> <span class="nt">to</span> <span class="nt">extend</span>
</span><span class='line'><span class="k">@import</span> <span class="nt">topcoat-button</span>
</span><span class='line'><span class="c">/* topdoc</span>
</span><span class='line'><span class="c">  name: Round Button</span>
</span><span class='line'><span class="c">  description: A simple, yet round button</span>
</span><span class='line'><span class="c">  modifiers:</span>
</span><span class='line'><span class="c">    :active: Round button active state</span>
</span><span class='line'><span class="c">    :disabled: Disabled state</span>
</span><span class='line'><span class="c">    :hover: Hover state</span>
</span><span class='line'><span class="c">    :focus: Focused</span>
</span><span class='line'><span class="c">  markup:</span>
</span><span class='line'><span class="c">    &lt;button class=&quot;topcoat-button--round&quot;&gt;Button&lt;/button&gt;</span>
</span><span class='line'><span class="c">    &lt;button class=&quot;topcoat-button--round&quot; disabled&gt;Button&lt;/button&gt;</span>
</span><span class='line'><span class="c">  tags:</span>
</span><span class='line'><span class="c">    - desktop</span>
</span><span class='line'><span class="c">    - light</span>
</span><span class='line'><span class="c">    - mobile</span>
</span><span class='line'><span class="c">    - button</span>
</span><span class='line'><span class="c">    - round</span>
</span><span class='line'><span class="c">*/</span>
</span><span class='line'><span class="nc">.topcoat-button--round</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@extend</span> <span class="nc">.topcoat-button</span>
</span><span class='line'>    <span class="nt">border-radius</span><span class="o">:</span> <span class="nt">999px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.topcoat-button--round</span><span class="nd">:disabled</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">topcoat</span><span class="o">-</span><span class="n">button</span><span class="o">:</span><span class="n">disabled</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.topcoat-button--round</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">topcoat</span><span class="o">-</span><span class="n">button</span><span class="o">:</span><span class="n">hover</span>
</span><span class='line'>  <span class="k">text-shadow</span><span class="o">:</span> <span class="n">var</span><span class="o">-</span><span class="k">text-shadow</span><span class="p">;</span>
</span><span class='line'>  <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="n">var</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.topcoat-button--round</span><span class="nd">:focus</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">topcoat</span><span class="o">-</span><span class="n">button</span><span class="o">:</span><span class="n">focus</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.topcoat-button--round</span><span class="nd">:active</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="n">var</span><span class="o">-</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'>    <span class="k">text-shadow</span><span class="o">:</span> <span class="n">var</span><span class="o">-</span><span class="k">text-shadow</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="n">var</span><span class="o">-</span><span class="k">background-color</span><span class="o">--</span><span class="n">down</span><span class="p">;</span>
</span><span class='line'>    <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="n">var</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">--</span><span class="n">down</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when you&#8217;ll run <code>grunt</code> again, the final CSS will include your button definition and the <code>demo/topcoat-green.html</code> demo page will present your new button with related documentation.</p>

<h2>Creating new Topcoat components</h2>

<p>Now you know how to add custom components and integrate them in the Topcoat workflow properly.</p>

<p>If you&#8217;re willing to share new components with the community (and you should), here&#8217;s the workflow :</p>

<ul>
<li>demo your component markup and css on <a href="http://codepen.io">codepen.io</a></li>
<li>create a github repo for your component, using the same structure as any of the <code>node_modules/topcoat-*</code> folder.</li>
<li>if accepted, your component will be added to the main Topcoat <code>package.json</code> then auto-installed with <code>npm install</code>.</li>
</ul>


<h2>Need help ?</h2>

<p>Comment below, use Github issues or join the #topcoat irc channel to discuss :)</p>

<p><strong>I hope this quick intro will help you choose Topcoat as your next CSS framework and you will contribute to the project so we can build together a better CSS framework.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phonegap day Amsterdam 2013]]></title>
    <link href="http://blog.revolunet.com/blog/2013/09/24/phonegap-day-amsterdam/"/>
    <updated>2013-09-24T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/09/24/phonegap-day-amsterdam</id>
    <content type="html"><![CDATA[<p>Once again, i&#8217;ve been lucky enough to go to Amsterdam today to attend the Phonegap Europe annual conference.</p>

<p>The <a href="http://www.compagnietheater.nl/compagnietheater.html">venue</a> was great, the talks covered various subjects, and, most importantly, the atmosphere reflected a positive and healthy community : open-minded and confident in the open web as a major platform for the future of mobile applications.</p>

<p>Almost 2 years after Adobe took control of Nitobi (the team behind the Phonegap genesis), the Phonegap project is in a great shape, dynamic, more open than ever, and with a sane and solid codebase, powered by node.js and a modern javascript toolchain, thanks to the hard work of the core team and many contributors.</p>

<p>With the 3.0 version, released a few weeks ago, Phonegap is now mature and flexible enough to serve as a foundation for your various mobile projects. Every single plugin has been extracted from codebase, which is now focused on bridging performance and plugin management.</p>

<p><strong>Phonegap is the perfect example of how open source can increase code quality and grow a solid community while serving a company business.</strong></p>

<p>Here is a quick recap of the most notable talks.</p>

<h3>Distimo</h3>

<p>Distimo is an app-analytic company that analyses app downloads, conversions and profits and compute smart data for the app developers.</p>

<p>They shared some interesting metrics :</p>

<ul>
<li>33% of worlwide app revenues comes from Asia.</li>
<li>Globally, ~65% of revenues comes from the AppStore and ~35% from Play Store (growing fast).</li>
<li>Candy Crush saga makes as much money in Asia on both iOS or Android</li>
<li>Games of course dominates stores revenues</li>
</ul>


<p>More data at : <a href="http://www.distimo.com/publications">http://www.distimo.com/publications</a></p>

<h3>Untappd</h3>

<p>Demo of one of the most successfull Phonegap apps : Untappd, a beautiful beer-centered social network app with 700k users and 4 stars rating. <a href="https://untappd.com/">Join now !</a></p>

<h3>Blackberry loves the web</h3>

<p>Too late maybe ?</p>

<h3>Native UI in Phonegap Apps</h3>

<p>Tanaka Masahiro demoed the <a href="https://github.com/monaca/monaca-framework-ios">Monaca hybrid framework</a> which gives you the ability to add native UI elements to your Phonegap app. You can wrap the phonegap webview with native tabbar/navigation bar to improve your UX, specially revelant on older Android devices. The framework also allows native transitions between various webviews, but this breaks application state. The framework hasn&#8217;t yet migrated to phonegap 3.0 so not usable as is IMHO.</p>

<p>Interesting real hybrid approach that demonstrates again that Phonegap is not necessarly a &#8220;full web&#8221; solution, but you can use as much &#8220;native&#8221; stuff as needed.</p>

<h3>Apple phonegap apps rejection prevention</h3>

<p><a href="https://twitter.com/rdlauer">Rob Lauer</a> from <a href="http://www.kendoui.com/">kendoui</a> shared his experiences about mobile web apps rejection reasons on the Apple Store.</p>

<p>Here&#8217;s a bunch of common best practices to prevent your Phonegap app to be rejected :</p>

<ul>
<li>Make an app, not a website</li>
<li>Create unique and useful apps</li>
<li>Don&#8217;t use annoying ads</li>
<li>User registration shouldn&#8217;t be mandatory (at least a free demo access)</li>
<li>Don&#8217;t force users to validate CGU</li>
<li>Never tag your app version lower to 1.0</li>
<li>Should work offline with minimal features</li>
<li>Don&#8217;t load remote code that change your app behaviour</li>
<li>Use beautiful, homogenous icons</li>
<li>Write accurate app description</li>
<li>Don&#8217;t try to steal Apple money, use in-app payments or die instantly</li>
</ul>


<h3>Topcoat.io</h3>

<p>Kristofer Joseph, original <a href="http://topcoat.io">TopCoat</a> author, talked about this beautiful and slick CSS framework focused on performance and themability.</p>

<p>TopCoat.io provides various widgets as pure HTML/CSS and, most importantly, provides the best technical stack ever to extend it cleanly :</p>

<ul>
<li><a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/">BEM CSS syntax</a> convention</li>
<li><a href="http://gruntjs.com">grunt</a>-based automation</li>
<li><a href="npmjs.org">npm</a> dependencies management</li>
<li><a href="https://github.com/topcoat/topdoc">TopDoc</a> documentation generator</li>
<li><a href="http://www.chromium.org/developers/telemetry">chrome telemetry</a>  performance analysis</li>
<li><a href="codepen.io">codepen.io</a> as a prototyping tool</li>
<li>What else ??</li>
</ul>


<p>Another great example of a successful project, open-sourced from day one and following the best practices from the ground up.</p>

<p>TopCoat is definitely shaped for the future and you can already use it in your Phonegap projects !</p>

<p>Check out <a href="https://twitter.com/devgirlfl">@devgirlfl</a> article &amp; demo : <a href="http://devgirl.org/2013/08/29/totally-rad-topcoat/">http://devgirl.org/2013/08/29/totally-rad-topcoat</a></p>

<h3>WizCorp HTML5 gaming</h3>

<p>Yes you can build great games with Phonegap. You don&#8217;t necessarly draw directly inside the webview, but as phonegap is very open and extensible, you can easily plug native features as needed, like <a href="http://impactjs.com/ejecta">Ejecta</a> (off browser canvas+audio for iOS), webGL views&#8230; WizCorp team shares some interesting code <a href="https://github.com/Wizcorp">on their github</a>, like a native spinner, navigation views helper&#8230;</p>

<h3>Chrome Cordova plugins</h3>

<p>This may be the biggest announce of this event : We can now use Chrome APIs right in our cordova applications. For the moment, we just have socket, storage, notifications, and identity (oauth), but in a near future, we&#8217;ll see support for syncFileSystem (synced data across devices) and more.</p>

<p>Basically, this means that you can code a Chrome Packaged App using only chrome APIs, then distribute it on desktop via the chrome store and then on mobile app stores using cordova !</p>

<p>This is very early stage but Google puts some efforts to stabilize and extend capabilities quickly.</p>

<p>All Chrome javascript APIs : <a href="http://developer.chrome.com/apps/api_index.html">http://developer.chrome.com/apps/api_index.html</a></p>

<p>Cordova implemented APIs can be found at : <a href="http://plugins.cordova.io">http://plugins.cordova.io</a></p>

<h3>Testing with appium.io</h3>

<p><a href="http://twitter.com/filmaj">Fil Maj</a> demonstrated <a href="http://appium.io">appium</a>, an open source end-to-end testing platform that fully support phonegap applications. You can write automation scripts (think selenium) then run them on your own devices, or use appium infrastructure to run the tests on various devices and produces detailed reported.</p>

<p>In a world of such devices fragmentation, this can be very useful :)</p>

<h3>Firefox OS</h3>

<p>Phonegap now also support Firefox OS ;) and Firefox provides many more javascript APIs, like &#8216;Activites&#8217; (think Web intents). If you support the real open web, Mozilla is definitely the way to go :)</p>

<h3>Phonegap CLI</h3>

<p>This awesome talk by <a href="twitter.com/mwbrooks">Michael Brooks</a> was the most interesting and technical talk of the day. Michael showed us how powerful the cordova and phonegap CLI are. Based on a cutting edge javascript architecture, the phonegap CLI is made of nodes modules that you can use directly in the CLI, or as external nodeJS modules, which allows you to integrate the whole workflow in third-party tools and vice-versa. open source power :)</p>

<p>He also demonstrated how easy it is to create and compile apps with or without the locally installed SDKs, using phonegap build as a fallback. Just run for example <code>phonegap compile ios</code> from your machine, then in seconds you get back a QRcode that you can scan to test your final app on a real device instantly; neat !</p>

<h4>Finally, a big thanks to <a href="https://twitter.com/colene">Colene</a>, <a href="https://twitter.com/ppk">Peter Paul Koch</a> and all the Phonegap team for this event, can&#8217;t wait for next year :)</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npm vs pip]]></title>
    <link href="http://blog.revolunet.com/blog/2013/09/18/npm-vs-pip/"/>
    <updated>2013-09-18T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/09/18/npm-vs-pip</id>
    <content type="html"><![CDATA[<p>After my morning <a href="https://twitter.com/revolunet/status/380210846578016256">twitter rant</a> about <code>npm install &gt; pip install</code> i need to add some clarifications and explain why i meant. Basically i meant that npm is much easier to use from a user perspective, which is an essential point to grow a community. Package management and dependencies is an important part of modern application development workflow and thus needs high consideration.</p>

<p><a href="https://npmjs.org/">npm</a> (node packaged modules) was released at end of 2011 and for sure it&#8217;s inspired from many other packages manager while removing their commons hassles. Also, its used both on backend and on frontend projects (eg: AngularJS+grunt).</p>

<p>Some of the <a href="http://www.pip-installer.org/en/latest/">pip</a> hassles are :</p>

<ul>
<li>you need to install virtualenv separately</li>
<li>you need to configure it and run cryptic commands to activate virtualenvs</li>
<li>you can install virtualenvwrapper to make thing easier though</li>
<li>you still need to configure it though</li>
<li>a fresh <code>pip install</code> in a project containing the standard requirements.txt does nothing</li>
</ul>


<p>On the other side, npm is a no-brainer to use :</p>

<ul>
<li><code>npm install</code> installs/upgrades any project dependencies</li>
<li>there&#8217;s no notion of virtualenv, it just uses what you have in the current <code>node_modules</code> folder or in your global install.</li>
</ul>


<p>Both are for sure very powerful tools that goes far beyond this basic usage but this is daily work for the developer and also the first contact when entering a new project so it should work seamlessly.</p>

<p>Please correct me if i&#8217;m wrong :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS tips'n'tricks part 2]]></title>
    <link href="http://blog.revolunet.com/blog/2013/07/23/angularjs-tips-n-tricks-2/"/>
    <updated>2013-07-23T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/07/23/angularjs-tips-n-tricks-2</id>
    <content type="html"><![CDATA[<p>Here&#8217;s a new batch of AngularJS tips and gotchas; If you didn&#8217;t read it yet, you can check the <a href="http://blog.revolunet.com/blog/2013/05/01/angular-tips-n-tricks/">part 1</a> and feel free to comment below :)</p>

<h3>Access an element scope from outside</h3>

<p>This is useful for debugging: in your Chrome console, highlight a node in the Elements tab, then, in the console, to check its scope :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">$0</span><span class="p">).</span><span class="nx">scope</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>or even :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;elementId&#39;</span><span class="p">)).</span><span class="nx">scope</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?utm_source=chrome-ntp-icon">Batarang Chrome Extension</a> is much powerful and let you inspect any scope, anywhere :)</p>

<h3>Unwatch an expression</h3>

<p>Sometimes you want to watch an expression only a few times, and then forget it. The <code>$watch</code> function returns a callback just for that. You just have to execute it back to destruct the watcher.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">watcher</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;data.counter&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">iElement</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="mi">50</span> <span class="o">*</span> <span class="nx">newValue</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">newValue</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// autodestruction when data.counter reaches 10</span>
</span><span class='line'>        <span class="nx">watcher</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Group elements in a select</h3>

<p>If you play with selects, the <code>ng-options</code> directive is <a href="http://docs.angularjs.org/api/ng.directive:select">quite powerful</a> and <a href="http://odetocode.com/blogs/scott/archive/2013/06/19/using-ngoptions-in-angularjs.aspx">has many syntaxes</a>.</p>

<p>For example you can easily group a model by attribute to have a nested select menu :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;select</span> <span class="na">ng-options=</span><span class="s">&quot;distrib.version group by distrib.name for distrib in distribs&quot;</span><span class="nt">&gt;&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, just add an <code>ng-model</code> directive to your select to data-bind it to one of the values.</p>

<h3>Filter falsy values</h3>

<p>You can&#8217;t use the builtin filter for falsy attributes or values :/ I don&#8217;t know if this is a bug of feature, but a simple workaround is to use a custom filter function that you can expose on the scope. (you can also define your own filter).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">testValues</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">42</span><span class="p">];</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">isFalsy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">!</span><span class="nx">val</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{ testValues|filter:true }}        //  [true]
</span><span class='line'>{{ testValues|filter:5 }}           //  [5]
</span><span class='line'>{{ testValues|filter:0 }}           //  [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, false, true, 0, -1, 5, 42]
</span><span class='line'>{{ testValues|filter:false }}       //  [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, false, true, 0, -1, 5, 42]
</span><span class='line'>{{ testValues|filter:isFalsy }}     //  [false, 0]
</span></code></pre></td></tr></table></div></figure>


<h3>Filter on objects</h3>

<p>The builtin filter function is <a href="http://code.angularjs.org/1.1.5/docs/api/ng.filter:filter">quite powerful</a> and allows you to filter a list of objects on given properties only, or on everything, exactly or not, negated or not, etc&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{ games|filter:&#39;street&#39; }}                       //  all games containing &quot;street&quot; in any property
</span><span class='line'>{{ games|filter:&#39;!street&#39; }}                      //  all games NOT containing &quot;street&quot; in any property
</span><span class='line'>{{ games|filter:{name:&#39;street&#39;} }}                //  all games containing &quot;street&quot; in their name
</span><span class='line'>{{ games|filter:{name:&#39;street&#39;}:true }}           //  all games named exactly &quot;street&quot;
</span><span class='line'>{{ games|filter:{name:&#39;street&#39;, device:&#39;PS3&#39;} }}  //  all games containing &quot;street&quot; in their name and PS3 in their device
</span></code></pre></td></tr></table></div></figure>


<h3>ng-repeat with duplicate items</h3>

<p>If for some reason you need to have duplicate items in your <code>ng-repeat</code> you can extend your <code>ng-repeat</code> expression with <code>track by $index</code> and it works :)</p>

<h3>Directive : parse attribute without watching it</h3>

<p>In one of your directive, if you need to have a read-only access to an attribute model, but without the automatic watch/binding, you can simply use <code>&amp;</code> instead of <code>=</code> when declaring the binding in the scope. You&#8217;ll then be able to access the model value . (this may break in future releases). This is a shortcut for using the <code>$parse</code> service on the current scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;rnCounter&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">count</span><span class="o">:</span> <span class="s1">&#39;&amp;rnCounter&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">iElement</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">count</span><span class="p">());</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Data-binding to a boolean</h3>

<p>You can bind to a boolean value, but you <strong>can&#8217;t</strong> update that value from your directive.</p>

<p>This won&#8217;t work :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">rn-zippy</span> <span class="na">status=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;rnZippy&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;A&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">status</span><span class="o">:</span> <span class="s1">&#39;=?&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">toggle</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">scope</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="o">!</span><span class="nx">scope</span><span class="p">.</span><span class="nx">status</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">iElement</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">toggle</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>You need to use a real model, OR, initialise a new one and use it as your model instead :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">rn-zippy</span> <span class="na">ng-init=</span><span class="s">&quot;status=true&quot;</span> <span class="na">status=</span><span class="s">&quot;status&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Includes onload</h3>

<p>You can trigger a callback when your <code>ng-include</code> partial is loaded :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-inlude=</span><span class="s">&quot;&#39;partials/&#39; + page + &#39;.html&#39;&quot;</span> <span class="na">onload=</span><span class="s">&quot;callback()&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the <code>ngView</code>, you need to listen to the <code>$viewContentLoaded</code> event.</p>

<h3>Express testing</h3>

<p>You know you should write serious tests suites ? There&#8217;s everything to help you in AngularJS with Karma test runner + Jasmine.</p>

<p>Once you have many tests, they can take some time to execute and there&#8217;s a little trick to speed you up : you can limit the test-runner to a given test group by using <code>ddescribe</code> instead of <code>describe</code> and to a single test with <code>iit</code> instead of <code>it</code>.</p>

<p>That&#8217;s awesome to focus on specific tests for a while.</p>

<h3>Service decorators</h3>

<p>You can easily decorate and modify any existing service or directive. That&#8217;s how the <code>ngMobile</code> overrides the <code>ngClick</code> directive to handle transparently the FastClick behaviour.</p>

<p>Here&#8217;s an exemple that overrides the <code>$sniffer</code> service and fix the animation detection for older androids devices (landed in <a href="https://github.com/angular/angular.js/commit/ef5bc6c">ef5bc6c</a>) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$provide&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$provide</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$provide</span><span class="p">.</span><span class="nx">decorator</span><span class="p">(</span><span class="s1">&#39;$sniffer&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$delegate&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$delegate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$delegate</span><span class="p">.</span><span class="nx">transitions</span><span class="o">||!</span><span class="nx">$delegate</span><span class="p">.</span><span class="nx">animations</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$delegate</span><span class="p">.</span><span class="nx">transitions</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">webkitTransition</span><span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$delegate</span><span class="p">.</span><span class="nx">animations</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">webkitAnimation</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$delegate</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}]);</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all for today, feel free to ask and comment below :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn AngularJS in 5 steps]]></title>
    <link href="http://blog.revolunet.com/blog/2013/06/01/starting-with-angularjs/"/>
    <updated>2013-06-01T02:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/06/01/starting-with-angularjs</id>
    <content type="html"><![CDATA[<p>I&#8217;ve seen some developers quite shy about AngularJS when confronted to all the magical powers; don&#8217;t be afraid, AngularJS indeed introduces several new concepts but you can get them in just a few weeks of practice&#8230; The Google team is working hard to lower the Angular entry barrier and to make everything as simple as possible for developers.</p>

<p><strong>AngularJS is a new disruptive innovation in the Javascript frameworks world and it prefigures the future of web browsers : templates, data-binding, web components&#8230;</strong></p>

<p>In this post i&#8217;ll give some advices for the AngularJS newbies and share with you the best pointers to learn and understand the core concepts quickly.</p>

<p>First, to understand AngularJS you of course need to know a bit of Javascript. If you&#8217;re not comfortable enough yet, pick a free book on <a href="http://jsbooks.revolunet.com">JSbooks</a> and <a href="http://www.codecademy.com/tracks/javascript">practice</a>.</p>

<p>If you have a jQuery background, you absolutely need to read this in-depth Stack Overflow answer : <a href="http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background/15012542#15012542">How to think in AngularJS if i have a jQuery background</a>. Just imagine the productivity boost you&#8217;ll get when you won&#8217;t need to maintain the DOM anymore :)</p>

<h3>To sum up key features of AngularJS :</h3>

<ul>
<li><strong>Templates</strong> : Your templates lives right in the DOM. Forget mustache, handlebars, hogan&#8230;</li>
<li><strong>Two-way data-binding</strong> : Your javascript data automagically updates your DOM and vice-versa.</li>
<li><strong>Routing</strong> : Define routes, associate templates and controller in just a few lines.</li>
<li><strong>Forms</strong> : Many helpers to help dealing with forms, one of the worst webdevs nightmare.</li>
<li><strong>Directives</strong> : Encapsulates templates and code in reusable components easily.</li>
<li><strong>Testability</strong> : AngularJS was designed in a way your web app can be fully testable.</li>
<li><strong>Animation</strong> : Easily animate elements and views.</li>
</ul>


<h3>Here are 5 steps to boost your AngularJS skills right now :</h3>

<ol>
<li>follow the <a href="http://docs.angularjs.org/tutorial">official tutorial</a> and the <a href="http://docs.angularjs.org/guide">dev guide</a>.</li>
<li>watch the awesome <a href="http://egghead.io">egghead.io video series</a>. they&#8217;re 3mins each only :)</li>
<li>watch the <a href="http://www.youtube.com/watch?v=i9MHigUZKEM">60mins AngularJS fundamentals video</a></li>
<li>read the code of <a href="http://todomvc.com/architecture-examples/angularjs">some</a> <a href="https://github.com/petebacondarwin/foodme">great</a> <a href="https://github.com/angular-app/angular-app">AngularJS</a> <a href="https://github.com/vojtajina/task-manager">app</a> <a href="https://github.com/IgorMinar/Memory-Game">examples</a>.</li>
<li>read as many times as needed the <a href="http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs">nuances of scope prototypal inheritance</a></li>
</ol>


<p>Of course, dont just watch/read, you need to experiment every step :)</p>

<p>After that, you should have a pretty good understanding of the framework and be able to <strong>angularize all the things</strong> :)</p>

<p><strong>Need help ?</strong> Ask your questions in the comments below, or on IRC #angularjs channel, or on <a href="https://groups.google.com/forum/?fromgroups#!forum/angular">the dedicated google group</a>.</p>

<p>BTW, if you read French, great ressources here : <a href="http://www.frangular.com">frangular.com</a> and <a href="http://lauterry.github.io/slides-prez-angular">Thierry Lau&#8217;s introduction slides</a>.</p>

<p>Need more ressources ?</p>

<ul>
<li>Read the Angular source itself : <a href="https://github.com/angular/angular.js">github.com/angular/angular.js</a></li>
<li><a href="https://github.com/jmcunningham/AngularJS-Learning">A huge list of good AngularJS ressources</a> maintained by the community</li>
<li><a href="https://gist.github.com/revolunet/4657146">My AngularJS ressources compilation</a></li>
<li><a href="https://github.com/angular/angular.js/wiki/JSFiddle-Examples">Lots of JSfiddle examples in the AngularJS wiki</a></li>
<li><a href="http://stackoverflow.com/questions/tagged/angularjs">Stack overflow answers</a></li>
<li><a href="https://speakerdeck.com/search?q=angularjs">Speackerdeck prezos</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoogleIO 2013 keynote recap]]></title>
    <link href="http://blog.revolunet.com/blog/2013/05/15/google-io-2013-keynote/"/>
    <updated>2013-05-15T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/05/15/google-io-2013-keynote</id>
    <content type="html"><![CDATA[<p>So today was the opening of the 2013 GoogleIO developer conference in San Francisco and the Googlers announced a <strong>insanely crazy</strong> amount of new projects/services/features in just the first few hours, which is very exciting for every web/android developer. The next three days will be very busy, with a lot of focus on Chrome, Android and Google+.</p>

<p>Though, we don&#8217;t have new Nexus devices, no Android 4.3, and no Javascript AppEngine runtime. So huge fail on my <a href="https://twitter.com/revolunet/status/333620420798472192">previous predictions</a>.</p>

<p>The keynote started with a big fail demo effect happened in the very first demo about Android multiplayer gaming when demoing a new Google Cloud Messaging feature, quite embarassing, but then everything ran smoothly.</p>

<p>Here&#8217;s a little recap of the most important things announced just during the 3 hours keynote :</p>

<h2><a href="http://officialandroid.blogspot.fr/2013/05/androidio-just-press-play.html">Android</a></h2>

<ul>
<li>Google cloud messaging : can now be used in a bidirectionnal way, and apps can now also store data in the cloud and sync it across devices (scores, leaderboards&#8230;).</li>
<li>Google Game Services platform to help game developers with new APIs</li>
<li>Samsung Galaxy S4 will be available in June on Google Play with standard Android build and unlocked bootloader ! 649$ though but without that ugly, messy, shitty Samsung overlay.</li>
<li><a href="http://www.youtube.com/watch?v=e0fXuyL0xVU">Android studio</a> to replace Eclipse nightmare, finally ! good move !</li>
<li>Unified and synced notifications between devices.</li>
<li>Translation service for apps, better analytics&#8230;</li>
<li>Enhanced maps API</li>
</ul>


<h2><a href="http://play.google.com/about/music/">Google Music</a></h2>

<ul>
<li>Access to all the music for 9.99$/month</li>
<li>Discover to new recommended songs with google suggestions</li>
<li>Google powered radio feature based on what you like</li>
</ul>


<h2><a href="https://plus.google.com/+chrome/posts">Chrome / Web</a></h2>

<ul>
<li>750 millions active chrome users globally</li>
<li>WebP and VP9 royalty-free compression standards for images and videos to increase speed specially on mobile devices.</li>
<li>Google provides a free (deactivable) proxy for Android to improve speed based on this codecs.</li>
<li>New payment autocomplete API will help process payments quickly on websites, specially useful on mobile (2 clicks payments)</li>
<li>Google will finally release a rock solid UI framework based on web components standards : <a href="http://www.polymer-project.org">polymer-project.org</a> . I wonder how it will fit with AngularJS.</li>
<li>V8 will integrate asm.js to improve Javascript performance.</li>
</ul>


<h2><a href="http://googleplusproject.blogspot.fr/2013/05/new-google-stream-hangouts-and-photos.html">Google +</a></h2>

<ul>
<li>New interface :)</li>
<li>Better Hangouts</li>
<li>Unified notifications across devices</li>
<li>Better pictures management, event an &#8216;auto awesome&#8217; mode :)</li>
</ul>


<h2><a href="http://google-latlong.blogspot.fr/2013/05/meet-new-google-maps-map-for-every.html">Maps</a></h2>

<ul>
<li>iPad version this summer</li>
<li>Brand new Google maps, with new design, more space for content, and builtin 3D thanks to WebGL</li>
</ul>


<h2>Gmail</h2>

<ul>
<li>You can now <a href="http://googlecommerce.blogspot.fr/2013/05/send-money-to-friends-with-gmail-and.html">send money to your friends right from Gmail with google wallet</a> :)</li>
<li>Developers can now <a href="http://googleappsdeveloper.blogspot.fr/2013/05/introducing-actions-in-inbox-powered-by.html">add actions to their email</a></li>
</ul>


<h2>In other news</h2>

<ul>
<li>For some reasons (<a href="https://code.google.com/p/googleappengine/issues/list">top requested features</a>), <a href="https://gaeforphp.appspot.com">Google choosed PHP over Javascript as a new AppEngine runtime</a>. <strong>#WTF</strong></li>
<li>Google Play for education allows teachers/schools to push content directly to students devices</li>
<li>Google TVs will be <a href="https://plus.google.com/+GoogleTVDevelopers/posts/X5rmq6Yu8xG">updated to Android 4.2 and latest chrome</a> !</li>
</ul>


<p>Anything missed ?</p>

<p>You can still watch the full keynote <a href="http://www.youtube.com/watch?v=lLPue2vK3wg">on Youtube</a> of course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making of the angular-carousel]]></title>
    <link href="http://blog.revolunet.com/blog/2013/05/02/angular-carousel-making-of/"/>
    <updated>2013-05-02T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/05/02/angular-carousel-making-of</id>
    <content type="html"><![CDATA[<p>Our first real life experiment with AngularJS is a mobile and touch-friendly carousel directive.</p>

<p>As this project shed some lights on various AngularJS aspects, we&#8217;d like to share it with you;
The full demo+code is available here : <a href="http://blog.revolunet.com/angular-carousel">http://blog.revolunet.com/angular-carousel</a></p>

<p>The goal is to transform any <code>ng-repeat</code> directive into a carousel, just by adding the <code>rn-carousel</code> attribute to its <code>ul</code> container. The directive take care of the dirty work for you, without any jQuery.</p>

<p>Here&#8217;s a very basic example of a Youtube API call, with the data displayed in a regular Angular template; We just add a <code>rn-carousel</code> attribute to the <code>ul</code> element to ask a carousel :)</p>

<iframe style="width: 100%; height: 330px" src="http://jsfiddle.net/3QBEE/embedded/result,html,js,css/light/"></iframe>


<br><br>


<p>This <code>rn-carousel</code> directive is responsible of :</p>

<p><strong>1) wrapping the real ul/li in a carousel container and add CSS classes</strong></p>

<p>We first wrap the original <code>ul</code> block in an outer div using JQlite <code>wraps</code> method during the directive link phase. This cannot be doneduring the compile phase as it would lead to an infinite recursion loop. (AngularJS will wrap again an again as the original directive stays untouched).</p>

<p>Then we add some CSS classes and an unique carousel identifier class so we can target that instance easily later.</p>

<p>The CSS makes the ul/li block appears as a single horizontal line composed of many li blocks, so its very easy to slide the blocks horizontally.</p>

<p><strong>2) watching the ng-repeat expression</strong></p>

<p>Because we want to monitor precisely the items in our carousel, and we want to be able to dynamically add/remove items, we need to extract and watch the original <code>ng-repeat</code> expression. We can then watch that expression and then be notified when its updated. This is useful to know how many slides we have and update our indicators accordingly for example.</p>

<p><del>This extraction is done by literally parsing the ng-repeat expression in a generic way, using the generated normalized comment node. <a href="http://www.bennadel.com/blog/2457-Accessing-scope-On-The-DOM-Using-AngularJS.htm">Credits goes to @bennadel</a> for this awesome trick</del>.</p>

<p><strong>Update :</strong> I ended up with just extracting the li <code>ng-repeat</code> attribute during the <code>compile</code> phase which is much less overhead.</p>

<p><strong>3) binding touch and click events</strong></p>

<p>Like most directives, we bind events in the linking phase. We just take care of binding both touch and mouse events.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// bind events</span>
</span><span class='line'><span class="nx">container</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;mousedown touchstart&#39;</span><span class="p">,</span> <span class="nx">swipeStart</span><span class="p">);</span>
</span><span class='line'><span class="nx">container</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;mousemove touchmove&#39;</span><span class="p">,</span> <span class="nx">swipe</span><span class="p">);</span>
</span><span class='line'><span class="nx">container</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;mouseup touchend&#39;</span><span class="p">,</span> <span class="nx">swipeEnd</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>4) animating the slides smoothly</strong></p>

<p>When we detect a <code>touchstart</code> we just store the initial event position. On <code>touchemove</code> we update the horizontal offset and move the whole <code>ul</code> accordingly using CSS. Then on <code>touchend</code>, we detect the desired position (prev or next) and dynamically add CSS styles and classes to move the slides accordingly, or restore the current position in some cases.</p>

<p>The slide movement is made thanks to the CSS <code>transition</code> and <code>translate3d</code> properties to force CSS 3D transforms and thus animate the slides using the GPU which make the movement much more smooth especially on mobile devices.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// the offset value is simply : desiredSlideIndex * slideWidth</span>
</span><span class='line'><span class="nx">carousel</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span>
</span><span class='line'>    <span class="s1">&#39;-webkit-transform&#39;</span><span class="o">:</span> <span class="s1">&#39;translate3d(&#39;</span> <span class="o">+</span> <span class="nx">offset</span> <span class="o">+</span> <span class="s1">&#39;px,0,0)&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;-moz-transform&#39;</span><span class="o">:</span> <span class="s1">&#39;translate3d(&#39;</span> <span class="o">+</span> <span class="nx">offset</span> <span class="o">+</span> <span class="s1">&#39;px,0,0)&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;-ms-transform&#39;</span><span class="o">:</span> <span class="s1">&#39;translate3d(&#39;</span> <span class="o">+</span> <span class="nx">offset</span> <span class="o">+</span> <span class="s1">&#39;px,0,0)&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;-o-transform&#39;</span><span class="o">:</span> <span class="s1">&#39;translate3d(&#39;</span> <span class="o">+</span> <span class="nx">offset</span> <span class="o">+</span> <span class="s1">&#39;px,0,0)&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;transform&#39;</span><span class="o">:</span> <span class="s1">&#39;translate3d(&#39;</span> <span class="o">+</span> <span class="nx">offset</span> <span class="o">+</span> <span class="s1">&#39;px,0,0)&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>5) adding an indicator to our carousel</strong></p>

<p>As we already watch the <code>ng-repeat</code> expression, we track the number of slides in the carousel and so its quite easy to add data-bound indicators to our carousel. You can enable these by adding a <code>rn-carousel-indicator="true"</code> attribute on your <code>ul</code>.</p>

<p>The indicators are produced by the <code>rn-carousel-indicators</code> directive, completely decoupled, during the linking phase. For the directive to be executed, we compile it through the <code>$compile</code> service before appending it to our container.</p>

<p>It just takes <code>items</code> and <code>index</code> attributes that will be injected in an isolated scope to produce the indicators and set the CSS classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// enable carousel indicator</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">showIndicator</span> <span class="o">=</span> <span class="p">(</span><span class="nx">iAttrs</span><span class="p">[</span><span class="s1">&#39;rnCarouselIndicator&#39;</span><span class="p">]</span><span class="o">===</span><span class="s1">&#39;true&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">showIndicator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// as the HTML contains a directive, we need to $compile it</span>
</span><span class='line'>    <span class="c1">// before appending it to our container</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">indicator</span> <span class="o">=</span> <span class="nx">$compile</span><span class="p">(</span><span class="s2">&quot;&lt;div id=&#39;&quot;</span> <span class="o">+</span> <span class="nx">carouselId</span> <span class="o">+</span><span class="s2">&quot;-indicator&#39; &quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s2">&quot; index=&#39;carouselIndex&#39; items=&#39;carouselItems&#39; rn-carousel-indicators &quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s2">&quot; class=&#39;rn-carousel-indicator&#39;&gt;&lt;/div&gt;&quot;</span>
</span><span class='line'>    <span class="p">)(</span><span class="nx">scope</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">indicator</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>6) offer a two-way data binding for the active slide index</strong></p>

<p>The carousel current index position can be data-bound to an optional <code>rn-carousel-index</code> attribute if provided. This allows you to display the carousel position somewhere else, add custom controls/indicators, initialise to a different slide&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// set initial position at first slide</span>
</span><span class='line'><span class="nx">scope</span><span class="p">.</span><span class="nx">carouselIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">iAttrs</span><span class="p">.</span><span class="nx">rnCarouselIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//  if a binding attribute is present, use it.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">activeModel</span> <span class="o">=</span> <span class="nx">$parse</span><span class="p">(</span><span class="nx">iAttrs</span><span class="p">[</span><span class="s1">&#39;rnCarouselIndex&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;carouselIndex&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// when the carousel internal index changes, update the model</span>
</span><span class='line'>        <span class="nx">activeModel</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">$parent</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">scope</span><span class="p">.</span><span class="nx">$parent</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="nx">$parse</span><span class="p">(</span><span class="nx">iAttrs</span><span class="p">.</span><span class="nx">rnCarouselIndex</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// when the model change, update the local position</span>
</span><span class='line'>        <span class="c1">// this is also useful for the initial position</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">carouselIndex</span> <span class="o">=</span> <span class="nx">newValue</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">updateSlidePosition</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// if no index attribute, just watch internal index and update display</span>
</span><span class='line'>    <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;carouselIndex&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">updateSlidePosition</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>updateSlidePosition()</code> function simply moves the <code>ul</code> block based on the <code>carouselIndex</code> value and the width of the slides. We do this with CSS transition and <code>translate3d</code> so this is animated and hardware accelerated.</p>

<p><strong>7) tests and grunt automation</strong></p>

<p>These subjects will have a dedicated article soon :)</p>

<p><strong>Limitations</strong></p>

<ul>
<li>Only works with ul/li structure</li>
<li>Carousel dimensions is based on the first li detected</li>
</ul>


<p><strong>UPDATE</strong> : the carousel can now be buffered to improve performance with large datasets !</p>

<p><strong>Easy isn&#8217;t it ?</strong></p>

<p>If you have questions, suggestions, issues, pulls requests&#8230; just comment below or on Github :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS tips'n'tricks part 1]]></title>
    <link href="http://blog.revolunet.com/blog/2013/05/01/angular-tips-n-tricks/"/>
    <updated>2013-05-01T00:00:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/05/01/angular-tips-n-tricks</id>
    <content type="html"><![CDATA[<p>In the past few months we learned a lot of new AngularJS stuff. Here is a first bunch of tricks, please comment and help us improve theses exemples if your tricks are even more awesome :)</p>

<p>We compiled most of our <a href="https://gist.github.com/revolunet/4657146">best AngularJS ressources in a gist</a> and we maintain a list of related  twitter accounts here : <a href="https://twitter.com/revolunet/angularjs">https://twitter.com/revolunet/angularjs</a>.</p>

<h3>Scopes</h3>

<p>You definitely need to read this article : <a href="http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs">http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs</a></p>

<h3>Directives</h3>

<p>The official documentation is not crystal clear at first approach but it documents most of what you need to understand: <a href="http://docs.angularjs.org/guide/directive">http://docs.angularjs.org/guide/directive</a>. So read it. And again. And again.</p>

<h3>Watch an object or a list</h3>

<p>If you watch a list or an object with the <code>objectEquality</code> parameter not set, then the <code>$watch</code> callback won&#8217;t be triggered if the object is only updated partially. Setting it to <code>true</code> will trigger it on any modification; this has performance impact so use carefully.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// the last `true` means compare by value and not by ref, useful for nested objects :)</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;myConfig&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;myConfig changed !&#39;</span><span class="p">,</span> <span class="nx">newValue</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="kc">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Two way data binding attribute without explicit scope declaration.</h3>

<p>Sometimes you need to access a directive attribute with a two-way data binding without declaring it explicitely in the directive scope configuration. You can do this using the <code>$parse</code> service.</p>

<p>If your directive scope is isolated (<code>scope: {}</code>) you have to use <code>scope.$parent</code> instead of <code>scope</code>.</p>

<iframe style="width: 100%; height: 500px" src="http://jsfiddle.net/p2cjt/embedded/js,html,result/light/"></iframe>


<br><br>


<h3>Use a callback function with arguments in your directive</h3>

<p>To call a function defined in one of your attribute, declare it in the scope with <code>&amp;</code>.</p>

<p>If you need to pass arguments, you must execute the callback using an object form for the arguments. AngularJS then call the function with your arguments in the correct order comparing your object and the callback declaration.</p>

<p>The following example also demonstrates how to watch multiples values at once.</p>

<iframe style="width: 100%; height: 500px" src="http://jsfiddle.net/HnrV7/embedded/js,html,result/light/"></iframe>


<br><br>


<h3>Custom transclusion</h3>

<p>This example shows how to define a custom transclusion function and modify its scope.</p>

<iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/pHZNY/embedded/js,html,result/light/"></iframe>


<br><br>


<h3>Announcer/Notifier pattern</h3>

<p>If you need to listen to DOM objects creation/deletion, you can simply create a &#8216;notifier&#8217; directive and an &#8216;announcer&#8217; directive that you&#8217;ll add to the objects you want to monitor. That directive will announce new instances creation (<code>link</code> called) and destruction (<code>scope.$destroy</code> called).</p>

<p>It can be useful if you want to monitor arbitrary objects lifecycles, for example a <code>ng-repeat</code>. The &#8216;announcement&#8217; can be made via events, or better, using a custom notifier controller. All credits goes to @garanajpr for the ideas.</p>

<iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/4ULCS/embedded/js,html,result/light/"></iframe>


<br><br>


<p>Many more tricks to come, stay tuned :)</p>

<p><strong>UPDATE</strong> : checkout <a href="http://blog.revolunet.com/blog/2013/07/23/angularjs-tips-n-tricks-2/">PART 2</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AngularJS views animations for mobile applications]]></title>
    <link href="http://blog.revolunet.com/blog/2013/04/30/angularjs-animations-mobile-applications/"/>
    <updated>2013-04-30T20:20:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/04/30/angularjs-animations-mobile-applications</id>
    <content type="html"><![CDATA[<p>AngularJS team recently added the very expected animation feature to their framework. You can have a great overview with the <a href="http://www.youtube.com/watch?v=cF_JsA9KsDM">MiÅ¡ko Hevery introduction video</a> and a complete overview article at the great <a href="http://www.yearofmoo.com/2013/04/animation-in-angularjs.html">Year of Moo blog</a>.</p>

<p>From now (AngularJS 1.1.4), you can easily animate any directive, just by adding an <code>ng-animate</code> attribute and defining the animation CSS class.</p>

<p><strong>UPDATE</strong> : AngularJS team <a href="https://github.com/angular/angular.js/commit/fd21c7502f0a25364a810c26ebeecb678e5783c5">fixed the following</a> problem in the last 1.1.5 release. The ng-animate will now be evaulated on each animation, Yahoo :)</p>

<p>As a mobile web developer, the first thing that come to mind is animating your mobile applications views. Its quite easy to add slide-in effects with the current routing system :</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/8pny4/embedded/result,js,html,css/light/"></iframe>


<br><br>


<p>As you can see, the code is very simple code and the animation is always the same (appear from right). But typically, if you open a screen in your mobile application, and there is a &#8216;Back&#8217; button, the user expects the slide animation to be reversed when he touches it. If you don&#8217;t do this, you expose your users to an unexpected behaviour, and an akward #WTF moment.</p>

<p>With the actual AngularJS implementation, there is a problem with the <code>ng-view</code> directive, which is heavily used for the AngularJS routing : it doesn&#8217;t handle dynamic <code>ng-animate</code> directive at all, despite what says the doc. You can only set the enter and leave animation once, because these <a href="https://github.com/angular/angular.js/blob/400f9360bb2f7553c5bd3b1f256a5f3db175b7bc/src/ng/directive/ngView.js#L173">are set at linking time</a> in case of the ng-view. And thus, you can only have one pre-defined enter and leave animation for your application view and for the whole application lifecycle.</p>

<p>There are a <a href="https://github.com/angular/angular.js/issues/2480">few</a> <a href="https://github.com/angular/angular.js/issues/2464">issues</a> opened and we can hope the team must be working on it and that should be resolved some day.</p>

<p>But an easy workaround to achieve this is to act on the enter and leave CSS classes themselves directly. Instead of changing the CSS classes names at the DOM level, one could update the CSS classes definitions to achieve the same result without even touching the DOM. The ng-view directive still has the same enter and leave CSS classes names and instead we change theses classes definition, and thus the animation direction.</p>

<p>There are several ways to do this. We could dynamically add a stylesheet to the document, or change the stylesheet source using <code>ng-src</code> attribute but this wouldn&#8217;t be very efficient due to multiple downloads of the ressource.</p>

<p>But, as we are AngularJS powered, we could simply <strong>bind a style tag to a javascript variable</strong> so it can be updated dynamically like any other DOM element.</p>

<p>Here&#8217;s how we&#8217;ve done bi-directionnal animations for the ng-view. Note the usage of the <code>ng-bind-html-unsafe</code> that take cares of not escaping the CSS output and the use of <code>transition</code> and <code>transform</code> CSS properties to force the use of GPU and improve the animation smoothness, especially on mobile devices.</p>

<iframe style="width: 100%; height: 350px" src="http://jsfiddle.net/UvP54/embedded/result,js,html,css/light/"></iframe>


<br><br>


<p>Another clever solution, as pointed out by Andrej in the comments below, is to simply wrap the <code>ng-view</code> in another div that have a dynamic class name, which could change when we need to change the animation direction, like <code>LR</code> then <code>RL</code>. This way we just need to update that classname and the CSS will pick the good one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.LR</span> <span class="nc">.enter-setup</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</span><span class='line'><span class="nc">.LR</span> <span class="nc">.leave-setup</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</span><span class='line'><span class="nc">.RL</span> <span class="nc">.enter-setup</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</span><span class='line'><span class="nc">.RL</span> <span class="nc">.leave-setup</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Cheat Sheet]]></title>
    <link href="http://blog.revolunet.com/blog/2013/04/15/octopress-cheatsheet/"/>
    <updated>2013-04-15T01:46:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/04/15/octopress-cheatsheet</id>
    <content type="html"><![CDATA[<p>When you switch to Octopress for blogging there are a very few things to know :</p>

<h2>Command line</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># create a new post</span>
</span><span class='line'>rake new_post<span class="o">[</span><span class="s1">&#39;Title of the post&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># create a new page </span>
</span><span class='line'>rake new_page<span class="o">[</span><span class="s1">&#39;Title of the page&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># preview your work</span>
</span><span class='line'>rake preview
</span><span class='line'>
</span><span class='line'><span class="c"># publish it</span>
</span><span class='line'>rake generate <span class="o">&amp;&amp;</span> rake deploy
</span><span class='line'>
</span><span class='line'><span class="c"># commit and backup(automatic message)</span>
</span><span class='line'>git commit -am <span class="s2">&quot;`date`&quot;</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating a post</h2>

<p>You can create a post just by adding a .markdown file in the source/_posts folder and preview it with <code>rake preview</code>. The name of the file will be your post url so use an appropriate <a href="http://en.wikipedia.org/wiki/Slug_(web_publishing)#Slug">slugified name</a>.</p>

<p>You must add some metas at the top of the file :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: My Awesome article.
</span><span class='line'>date: 2013-05-1 00:00
</span><span class='line'>categories: news technology web
</span><span class='line'>author: Super Man
</span><span class='line'>comments: <span class="nb">true</span>
</span><span class='line'>published: <span class="nb">false</span>
</span><span class='line'>---
</span></code></pre></td></tr></table></div></figure>


<p>If you set <code>published: false</code>, your posts will only be visible in preview mode.</p>

<h2>Publish</h2>

<p>When ready, just use <code>rake generate &amp;&amp; rake deploy</code> to publish it :)</p>

<p>Here&#8217;s a micro script to simplify the publish process, jsut put it in the blog root folder :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c"># push.sh : publish &amp; commit with a single command</span>
</span><span class='line'>git add <span class="nb">source</span>
</span><span class='line'>git commit -am <span class="s2">&quot;`date`&quot;</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">source</span>
</span><span class='line'>rake generate <span class="o">&amp;&amp;</span> rake deploy
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A fresh start]]></title>
    <link href="http://blog.revolunet.com/blog/2013/04/11/a-fresh-start/"/>
    <updated>2013-04-11T01:46:00+02:00</updated>
    <id>http://blog.revolunet.com/blog/2013/04/11/a-fresh-start</id>
    <content type="html"><![CDATA[<p>Our good old WordPress blog has been shutdown since a few months and now its time for us to start a brand new blogging adventure with OctoPress. As expected, we&#8217;ll talk about Web technologies, Rich web applications, Javascript, Python and Phonegap among others.</p>

<p>We&#8217;ve got so many stories to tell, so many tips to share and so much code to dissect, so stay tuned.</p>

<p>140 chars isn&#8217;t long enough.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Welcome :)&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
